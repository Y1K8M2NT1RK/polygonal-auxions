// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
  clientOutput = ".prisma/client"
  output = "../src/generated/pothos-types.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int        @id @default(autoincrement())
  slug_id           String     @unique @default(cuid())
  name              String     @db.VarChar(25)
  name_kana         String?    @db.VarChar(50)  // 日本語用
  handle_name       String     @unique @db.VarChar(60)
  password          String     @db.VarChar(30)
  birthday          DateTime   @db.Date
  introduction      String     @db.VarChar(500)
  phone_number      String     @db.VarChar()
  email             String     @unique @db.VarChar(150)
  address           String     @db.VarChar(150)
  created_at        DateTime   @default(now()) @db.Timestamp()
  updated_at        DateTime   @default(now()) @db.Timestamp() @updatedAt

  artworks          Artwork[]  @relation("artworks_fk")
  comments          Comment[]  @relation("comments_fk")

  // following_user    User[] @relation("user_follows")
  // followed_by_user  User[] @relation("user_follows")

  @@map(name: "users")
}

model Artwork {
  id            Int             @id @default(autoincrement())
  slug_id       String          @unique @default(cuid())
  user_id       Int
  title         String          @db.VarChar(500)
  likes         Int             @db.Integer @default(0)
  bads          Int             @db.Integer @default(0)
  feature       String          @db.VarChar(1000)
  created_at    DateTime        @default(now()) @db.Timestamp()
  updated_at    DateTime        @default(now()) @db.Timestamp() @updatedAt

  user          User           @relation("artworks_fk", fields: [user_id], references: [id])
  artwork_file  ArtworkFile[]  @relation("artworks_fk_from_artwork_files")
  comments      Comment[]      @relation("artworks_fk_from_comments")

  @@map(name: "artworks")
}

model ArtworkFile {
  id             Int                @id @default(autoincrement())
  artwork_id     Int
  file_name      String             @default(cuid())
  extension      String             @db.VarChar(4)
  created_at     DateTime           @default(now()) @db.Timestamp()
  updated_at     DateTime           @default(now()) @db.Timestamp() @updatedAt

  artwork        Artwork            @relation("artworks_fk_from_artwork_files", fields: [artwork_id], references: [id])
  artwork_gizmo  ArtworkGizmo[]     @relation("artwork_gizmos_fk")

  @@map(name: "artwork_files")
}

model ArtworkGizmo { // このテーブルは、モデルが含まれるファイルかどうかの判定材料になる
  id               Int            @id @default(autoincrement())
  artwork_file_id  Int
  transportX       Int
  transportY       Int
  transportZ       Int
  rotateX          Int
  rotateY          Int
  rotateZ          Int
  scaleX           Int
  scaleY           Int
  scaleZ           Int

  artwork_file     ArtworkFile    @relation("artwork_gizmos_fk", fields: [artwork_file_id], references: [id])

  @@map(name: "artwork_gizmos")
}

model Comment {
  id            Int             @id @default(autoincrement())
  slug_id       String          @unique @default(cuid())
  user_id       Int             // コメントしたユーザー
  artwork_id    Int             // コメント対象の作品
  body          String          @db.VarChar(500)
  created_at    DateTime        @default(now()) @db.Timestamp()
  updated_at    DateTime        @default(now()) @db.Timestamp() @updatedAt

  user          User?           @relation("comments_fk", fields: [user_id], references: [id])
  artwork       Artwork         @relation("artworks_fk_from_comments", fields: [artwork_id], references: [id])

  @@map(name: "comments")
}

// model Reports {}
// model ArtworksInCart {}
// model UserFiles {}
// model UserFavorites {}
// model UserBookmarks {}
// model Histories {
//  user_id
//  type_id
//  title
//  body
//  created_at
//  user  User  @relation("history_types_fk", fields: [user_id], references: [id])
//  @@map(name: "history_types")
// }
// model Posts {}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-arm64-openssl-1.1.x", "rhel-openssl-1.0.x"]
  // output removed: use default node_modules/.prisma/client to avoid permission issues
}

generator pothos {
  provider     = "prisma-pothos-types"
  output       = "../src/server/graphql/types/pothos.ts"
  clientImportPath = "@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

model User {
  id                Int        @id @default(autoincrement())
  slug_id           String     @unique @default(cuid())
  name              String     @db.VarChar(25)
  name_kana         String?    @db.VarChar(50)  // 日本語用
  handle_name       String     @unique @db.VarChar(60)
  // bcrypt ハッシュ(最大60文字)格納のため長さ拡張 (余裕含め72)
  password          String     @db.VarChar(72)
  birthday          DateTime   @db.Date
  introduction      String     @db.VarChar(500)
  phone_number      String     @db.VarChar(15)
  email             String     @unique @db.VarChar(150)
  address           String     @db.VarChar(150)
  role              UserRole   @default(USER)
  created_at        DateTime   @default(now()) @db.Timestamp()
  updated_at        DateTime   @default(now()) @db.Timestamp() @updatedAt

  auth_payload         AuthPayload?
  password_reset_tokens PasswordResetToken[]

  user_files        UserFiles[]     @relation("user_files_fk")
  artworks          Artwork[]       @relation("artworks_fk")
  artwork_ranks     ArtworkRanks[]  @relation("artwork_ranks_fk")
  user_ranks_reported UserRanks[]   @relation("user_ranks_reported")
  user_ranks_reporter UserRanks[]   @relation("user_ranks_reporter")
  comments          Comment[]       @relation("comments_fk")
  comment_ranks     CommentRanks[]  @relation("comment_ranks_fk")
  followed_by       Follow[]        @relation("followedBy")
  following         Follow[]        @relation("following")
  notifications_received Notification[] @relation("notifications_recipient")
  notifications_sent     Notification[] @relation("notifications_actor")
  articles          Article[]       @relation("article_author")

  @@map(name: "users")
}

model UserFiles { // アイコンの他背景画像にも使用
  id            Int       @id @default(autoincrement())
  user_id       Int
  purpose_id    Int
  file_path     String    @db.VarChar(500)
  file_name     String    @default(cuid())
  extension     String    @db.VarChar(4)
  created_at    DateTime  @default(now()) @db.Timestamp()
  updated_at    DateTime  @default(now()) @db.Timestamp() @updatedAt

  user          User      @relation("user_files_fk", fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  purpose       Purpose   @relation("purposes_fk", fields: [purpose_id], references: [id])

  @@map(name: "user_files")
}

model Purpose { // 1: 背景, 2: アイコン
  id            Int       @id @default(autoincrement())
  name          String    @unique @db.VarChar(50)

  user_files    UserFiles[] @relation("purposes_fk")

  @@map(name: "purposes")
}

model AuthPayload {
  id                 String     @id @default(uuid())
  access_token       String
  user_id            Int        @unique
  created_at         DateTime   @default(now())
  expires_at         DateTime

  user               User       @relation(fields: [user_id], references: [id])

  @@map(name: "auth_payload")
}

model PasswordResetToken {
  id         String   @id @default(uuid())
  token      String   @unique
  user_id    Int
  used       Boolean  @default(false)
  created_at DateTime @default(now())
  expires_at DateTime

  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map(name: "password_reset_tokens")
}

model Follow {
  followedBy        User @relation("followedBy", fields: [followed_by_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  followed_by_id    Int
  following         User @relation("following", fields: [following_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  following_id      Int

  @@id([following_id, followed_by_id])
  @@map(name: "follows")
}

model Artwork {
  id            Int             @id @default(autoincrement())
  slug_id       String          @unique @default(cuid())
  user_id       Int
  title         String          @db.VarChar(500)
  likes         Int             @db.Integer @default(0)
  bads          Int             @db.Integer @default(0)
  feature       String          @db.VarChar(1000)
  deleted       Boolean         @default(false)
  created_at    DateTime        @default(now()) @db.Timestamp()
  updated_at    DateTime        @default(now()) @db.Timestamp() @updatedAt

  user          User           @relation("artworks_fk", fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  artwork_file  ArtworkFile[]  @relation("artworks_fk_from_artwork_files")
  artwork_ranks ArtworkRanks[] @relation("artworks_fk_from_artwork_ranks")
  comments      Comment[]      @relation("artworks_fk_from_comments")
  notifications Notification[] @relation("notifications_artwork")

  @@map(name: "artworks")
}

model ArtworkFile {
  id             Int                @id @default(autoincrement())
  artwork_id     Int
  file_path      String             @db.VarChar(500)
  file_name      String             @default(cuid())
  extension      String             @db.VarChar(4)
  created_at     DateTime           @default(now()) @db.Timestamp()
  updated_at     DateTime           @default(now()) @db.Timestamp() @updatedAt

  artwork        Artwork            @relation("artworks_fk_from_artwork_files", fields: [artwork_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  artwork_gizmo  ArtworkGizmo[]     @relation("artwork_gizmos_fk")

  @@map(name: "artwork_files")
}

model ArtworkGizmo { // このテーブルは、モデルが含まれるファイルかどうかの判定材料になる
  id               Int            @id @default(autoincrement())
  artwork_file_id  Int
  transportX       Int
  transportY       Int
  transportZ       Int
  rotateX          Int
  rotateY          Int
  rotateZ          Int
  scaleX           Int
  scaleY           Int
  scaleZ           Int

  artwork_file     ArtworkFile    @relation("artwork_gizmos_fk", fields: [artwork_file_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map(name: "artwork_gizmos")
}

model Comment {
  id            Int             @id @default(autoincrement())
  slug_id       String          @unique @default(cuid())
  user_id       Int             // コメントしたユーザー
  artwork_id    Int             // コメント対象の作品
  body          String          @db.VarChar(500)
  created_at    DateTime        @default(now()) @db.Timestamp()
  updated_at    DateTime        @default(now()) @db.Timestamp() @updatedAt

  user          User?           @relation("comments_fk", fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  artwork       Artwork         @relation("artworks_fk_from_comments", fields: [artwork_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  comment_ranks CommentRanks[]  @relation("comment_ranks_fk_from_comments")
  notifications Notification[]  @relation("notifications_comment")

  @@map(name: "comments")
}

model CommentRanks { // コメント報告機能用のテーブル
  id            Int             @id @default(autoincrement())
  comment_id    Int             // 報告対象のコメント
  rank_id       Int             // 報告理由
  user_id       Int             // 報告したユーザー
  created_at    DateTime        @default(now()) @db.Timestamp()
  updated_at    DateTime        @default(now()) @db.Timestamp() @updatedAt

  comment       Comment         @relation("comment_ranks_fk_from_comments", fields: [comment_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user          User            @relation("comment_ranks_fk", fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  ranks         Ranks           @relation("comment_ranks_fk_from_ranks", fields: [rank_id], references: [id])

  @@unique([comment_id, rank_id, user_id]) // 複合一意キーの設定
  @@map(name: "comment_ranks")
}

model ArtworkRanks { // このテーブルは、評価機能のみならず報告/お気に入り/ブックマーク関連機能でも使用
  id            Int             @id @default(autoincrement())
  artwork_id    Int             // 評価/報告/お気に入り/ブックマーク対象の作品
  rank_id       Int             // 評価/報告/お気に入り/ブックマーク
  user_id       Int             // 評価/報告/お気に入り/ブックマークしたユーザ
  created_at    DateTime        @default(now()) @db.Timestamp()
  updated_at    DateTime        @default(now()) @db.Timestamp() @updatedAt

  user          User            @relation("artwork_ranks_fk", fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  artwork       Artwork         @relation("artworks_fk_from_artwork_ranks", fields: [artwork_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  ranks         Ranks           @relation("artwork_ranks_fk_from_ranks", fields: [rank_id], references: [id])

  @@unique([artwork_id, rank_id, user_id]) // 複合一意キーの設定
  @@map(name: "artwork_ranks")
}

model UserRanks { // ユーザー報告機能用のテーブル
  id            Int             @id @default(autoincrement())
  reported_user_id Int          // 報告対象のユーザー
  rank_id       Int             // 報告理由
  reporter_user_id Int          // 報告したユーザー
  created_at    DateTime        @default(now()) @db.Timestamp()
  updated_at    DateTime        @default(now()) @db.Timestamp() @updatedAt

  reported_user User            @relation("user_ranks_reported", fields: [reported_user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  reporter_user User            @relation("user_ranks_reporter", fields: [reporter_user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  ranks         Ranks           @relation("user_ranks_fk_from_ranks", fields: [rank_id], references: [id])

  @@unique([reported_user_id, rank_id, reporter_user_id]) // 複合一意キーの設定
  @@map(name: "user_ranks")
}

model Ranks { // このテーブルは、評価機能のみならず報告/お気に入り/ブックマーク関連機能でも使用
  id            Int             @id @default(autoincrement())
  name          String
  rank_type_id  Int

  artwork_ranks ArtworkRanks[]  @relation("artwork_ranks_fk_from_ranks")
  user_ranks    UserRanks[]     @relation("user_ranks_fk_from_ranks")
  comment_ranks CommentRanks[]  @relation("comment_ranks_fk_from_ranks")
  rank_type     RankTypes       @relation("ranks_fk", fields: [rank_type_id], references: [id])

  @@map(name: "ranks")
}

model RankTypes { // このテーブルは、評価機能のみならず報告/お気に入り/ブックマーク関連機能でも使用
  id            Int       @id @default(autoincrement())
  name          String

  ranks         Ranks[]   @relation("ranks_fk")

  @@map(name: "rank_types")
}

model Notification {
  id            Int             @id @default(autoincrement())
  slug_id       String          @unique @default(cuid())
  recipient_id  Int             // 通知を受け取るユーザー
  actor_id      Int?            // 通知のきっかけとなるアクションを行ったユーザー
  type          NotificationType // 通知の種類
  title         String          @db.VarChar(100)
  message       String          @db.VarChar(500)
  artwork_id    Int?            // 作品関連の通知の場合
  comment_id    Int?            // コメント関連の通知の場合
  is_read       Boolean         @default(false)
  created_at    DateTime        @default(now()) @db.Timestamp()
  updated_at    DateTime        @default(now()) @db.Timestamp() @updatedAt

  recipient     User            @relation("notifications_recipient", fields: [recipient_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  actor         User?           @relation("notifications_actor", fields: [actor_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  artwork       Artwork?        @relation("notifications_artwork", fields: [artwork_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  comment       Comment?        @relation("notifications_comment", fields: [comment_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map(name: "notifications")
}

enum NotificationType {
  FOLLOW          // フォローされた
  NEW_ARTWORK     // フォローしたユーザーが作品を追加
  NEW_COMMENT     // 自身の作品にコメント追加
}

model Article {
  id            Int       @id @default(autoincrement())
  slug_id       String    @unique @default(cuid())
  title         String    @db.VarChar(200)
  content       String?   @db.Text
  excerpt       String?   @db.VarChar(500)
  status        ArticleStatus @default(DRAFT)
  published_at  DateTime?
  author_id     Int?
  micro_cms_id  String?   @unique @db.VarChar(100) // microCMSのcontentId
  tags          String[]  @default([])
  featured_image String?  @db.VarChar(500)
  created_at    DateTime  @default(now()) @db.Timestamp()
  updated_at    DateTime  @default(now()) @db.Timestamp() @updatedAt

  author        User?     @relation("article_author", fields: [author_id], references: [id], onUpdate: Cascade, onDelete: SetNull)

  @@map(name: "articles")
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

// model ArtworksInCart {}
// model Histories {
//  user_id
//  type_id
//  title
//  body
//  created_at
//  user  User  @relation("history_types_fk", fields: [user_id], references: [id])
//  @@map(name: "history_types")
// }
// model Posts {}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-arm64-openssl-1.1.x", "rhel-openssl-1.0.x"]
  // output removed: use default node_modules/.prisma/client to avoid permission issues
}

generator pothos {
  provider     = "prisma-pothos-types"
  // Explicitly set clientOutput/import to keep stable import path in generated file
  clientOutput = "../node_modules/@prisma/client"
  output       = "../src/pages/api/types/pothos.ts"
  clientImportPath = "@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

model User {
  id                Int        @id @default(autoincrement())
  slug_id           String     @unique @default(cuid())
  name              String     @db.VarChar(25)
  name_kana         String?    @db.VarChar(50)  // 日本語用
  handle_name       String     @unique @db.VarChar(60)
  // bcrypt ハッシュ(最大60文字)格納のため長さ拡張 (余裕含め72)
  password          String     @db.VarChar(72)
  birthday          DateTime   @db.Date
  introduction      String     @db.VarChar(500)
  phone_number      String     @db.VarChar(15)
  email             String     @unique @db.VarChar(150)
  address           String     @db.VarChar(150)
  role              UserRole   @default(USER)
  created_at        DateTime   @default(now()) @db.Timestamp()
  updated_at        DateTime   @default(now()) @db.Timestamp() @updatedAt

  auth_payload      AuthPayload?

  user_files        UserFiles[]     @relation("user_files_fk")
  artworks          Artwork[]       @relation("artworks_fk")
  artwork_ranks     ArtworkRanks[]  @relation("artwork_ranks_fk")
  comments          Comment[]       @relation("comments_fk")
  followed_by       Follow[]        @relation("followedBy")
  following         Follow[]        @relation("following")

  @@map(name: "users")
}

model UserFiles { // アイコンの他背景画像にも使用
  id            Int       @id @default(autoincrement())
  user_id       Int
  purpose_id    Int
  file_path     String    @db.VarChar(500)
  file_name     String    @default(cuid())
  extension     String    @db.VarChar(4)
  created_at    DateTime  @default(now()) @db.Timestamp()
  updated_at    DateTime  @default(now()) @db.Timestamp() @updatedAt

  user          User      @relation("user_files_fk", fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  purpose       Purpose   @relation("purposes_fk", fields: [purpose_id], references: [id])

  @@map(name: "user_files")
}

model Purpose { // 1: 背景, 2: アイコン
  id            Int       @id @default(autoincrement())
  name          String    @unique @db.VarChar(50)

  user_files    UserFiles[] @relation("purposes_fk")

  @@map(name: "purposes")
}

model AuthPayload {
  id                 String     @id @default(uuid())
  access_token       String
  user_id            Int        @unique
  created_at         DateTime   @default(now())
  expires_at         DateTime

  user               User       @relation(fields: [user_id], references: [id])

  @@map(name: "auth_payload")
}

model Follow {
  followedBy        User @relation("followedBy", fields: [followed_by_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  followed_by_id    Int
  following         User @relation("following", fields: [following_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  following_id      Int

  @@id([following_id, followed_by_id])
  @@map(name: "follows")
}

model Artwork {
  id            Int             @id @default(autoincrement())
  slug_id       String          @unique @default(cuid())
  user_id       Int
  title         String          @db.VarChar(500)
  likes         Int             @db.Integer @default(0)
  bads          Int             @db.Integer @default(0)
  feature       String          @db.VarChar(1000)
  deleted       Boolean         @default(false)
  created_at    DateTime        @default(now()) @db.Timestamp()
  updated_at    DateTime        @default(now()) @db.Timestamp() @updatedAt

  user          User           @relation("artworks_fk", fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  artwork_file  ArtworkFile[]  @relation("artworks_fk_from_artwork_files")
  artwork_ranks ArtworkRanks[] @relation("artworks_fk_from_artwork_ranks")
  comments      Comment[]      @relation("artworks_fk_from_comments")

  @@map(name: "artworks")
}

model ArtworkFile {
  id             Int                @id @default(autoincrement())
  artwork_id     Int
  file_path      String             @db.VarChar(500)
  file_name      String             @default(cuid())
  extension      String             @db.VarChar(4)
  created_at     DateTime           @default(now()) @db.Timestamp()
  updated_at     DateTime           @default(now()) @db.Timestamp() @updatedAt

  artwork        Artwork            @relation("artworks_fk_from_artwork_files", fields: [artwork_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  artwork_gizmo  ArtworkGizmo[]     @relation("artwork_gizmos_fk")

  @@map(name: "artwork_files")
}

model ArtworkGizmo { // このテーブルは、モデルが含まれるファイルかどうかの判定材料になる
  id               Int            @id @default(autoincrement())
  artwork_file_id  Int
  transportX       Int
  transportY       Int
  transportZ       Int
  rotateX          Int
  rotateY          Int
  rotateZ          Int
  scaleX           Int
  scaleY           Int
  scaleZ           Int

  artwork_file     ArtworkFile    @relation("artwork_gizmos_fk", fields: [artwork_file_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map(name: "artwork_gizmos")
}

model Comment {
  id            Int             @id @default(autoincrement())
  slug_id       String          @unique @default(cuid())
  user_id       Int             // コメントしたユーザー
  artwork_id    Int             // コメント対象の作品
  body          String          @db.VarChar(500)
  created_at    DateTime        @default(now()) @db.Timestamp()
  updated_at    DateTime        @default(now()) @db.Timestamp() @updatedAt

  user          User?           @relation("comments_fk", fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  artwork       Artwork         @relation("artworks_fk_from_comments", fields: [artwork_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map(name: "comments")
}

model ArtworkRanks { // このテーブルは、評価機能のみならず報告/お気に入り/ブックマーク関連機能でも使用
  id            Int             @id @default(autoincrement())
  artwork_id    Int             // 評価/報告/お気に入り/ブックマーク対象の作品
  rank_id       Int             // 評価/報告/お気に入り/ブックマーク
  user_id       Int             // 評価/報告/お気に入り/ブックマークしたユーザ
  created_at    DateTime        @default(now()) @db.Timestamp()
  updated_at    DateTime        @default(now()) @db.Timestamp() @updatedAt

  user          User            @relation("artwork_ranks_fk", fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  artwork       Artwork         @relation("artworks_fk_from_artwork_ranks", fields: [artwork_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  ranks         Ranks           @relation("artwork_ranks_fk_from_ranks", fields: [rank_id], references: [id])

  @@unique([artwork_id, rank_id, user_id]) // 複合一意キーの設定
  @@map(name: "artwork_ranks")
}

model Ranks { // このテーブルは、評価機能のみならず報告/お気に入り/ブックマーク関連機能でも使用
  id            Int             @id @default(autoincrement())
  name          String
  rank_type_id  Int

  artwork_ranks ArtworkRanks[]  @relation("artwork_ranks_fk_from_ranks")
  rank_type     RankTypes       @relation("ranks_fk", fields: [rank_type_id], references: [id])

  @@map(name: "ranks")
}

model RankTypes { // このテーブルは、評価機能のみならず報告/お気に入り/ブックマーク関連機能でも使用
  id            Int       @id @default(autoincrement())
  name          String

  ranks         Ranks[]   @relation("ranks_fk")

  @@map(name: "rank_types")
}

// model ArtworksInCart {}
// model Histories {
//  user_id
//  type_id
//  title
//  body
//  created_at
//  user  User  @relation("history_types_fk", fields: [user_id], references: [id])
//  @@map(name: "history_types")
// }
// model Posts {}
